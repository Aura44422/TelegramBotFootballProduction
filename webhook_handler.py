import asyncio
import logging
from aiohttp import web
from typing import Dict, Optional
from database import Database
from donation_alerts import DonationAlerts

logger = logging.getLogger(__name__)

class WebhookHandler:
    def __init__(self, database: Database, donation_alerts: DonationAlerts, bot_application):
        self.db = database
        self.donation_alerts = donation_alerts
        self.bot_application = bot_application
        self.app = web.Application()
        self.setup_routes()
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è webhook'–æ–≤"""
        # Telegram webhook
        self.app.router.add_post('/webhook', self.handle_telegram_webhook)
        # DonationAlerts webhook
        self.app.router.add_post('/webhook/donation_alerts', self.handle_donation_alerts_webhook)
        # Health check
        self.app.router.add_get('/health', self.health_check)
    
    async def handle_telegram_webhook(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook
            data = await request.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram")
            
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç
            from telegram import Update
            update = Update.de_json(data, self.bot_application.bot)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update —á–µ—Ä–µ–∑ application
            await self.bot_application.process_update(update)
            
            return web.json_response({'status': 'ok'})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook: {e}")
            return web.json_response({'status': 'error'}, status=500)
    
    async def handle_donation_alerts_webhook(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç DonationAlerts"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook
            data = await request.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç DonationAlerts: {data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment_result = await self.donation_alerts.process_payment_webhook(data)
            
            if payment_result and payment_result['status'] == 'success':
                user_id = payment_result['user_id']
                subscription_type = payment_result['subscription_type']
                amount = payment_result['amount']
                payment_id = payment_result['payment_id']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
                subscription_days = {
                    'week': 7,
                    'two_weeks': 14,
                    'month': 30
                }
                
                days = subscription_days.get(subscription_type, 7)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.db.update_user_subscription(user_id, subscription_type, days)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
                await self.db.add_subscription_record(user_id, subscription_type, amount, payment_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.send_payment_success_message(user_id, subscription_type, amount, days)
                
                logger.info(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                return web.json_response({'status': 'success'})
            
            elif payment_result and payment_result['status'] == 'insufficient_amount':
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment_result}")
                return web.json_response({'status': 'insufficient_amount'})
            
            else:
                logger.warning(f"–ù–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {payment_result}")
                return web.json_response({'status': 'failed'})
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return web.json_response({'status': 'error'}, status=500)
    
    async def send_payment_success_message(self, user_id: int, subscription_type: str, amount: float, days: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        try:
            subscription_names = {
                'week': '–Ω–µ–¥–µ–ª—é',
                'two_weeks': '–¥–≤–µ –Ω–µ–¥–µ–ª–∏',
                'month': '–º–µ—Å—è—Ü'
            }
            
            subscription_name = subscription_names.get(subscription_type, subscription_type)
            
            message_text = f"""
‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**

üí≥ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:**
üìÖ –¢–∏–ø: {subscription_name}
üí∞ –°—É–º–º–∞: {amount}‚ÇΩ
‚è∞ –°—Ä–æ–∫: {days} –¥–Ω–µ–π

üéâ **–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!**

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ 15 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
/help - —Å–ø—Ä–∞–≤–∫–∞
"""
            
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="status")],
                [InlineKeyboardButton("‚öΩÔ∏è –ù–∞–π—Ç–∏ –º–∞—Ç—á–∏", callback_data="find_matches")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.bot_application.bot.send_message(
                chat_id=user_id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ: {e}")
    
    async def health_check(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        return web.json_response({'status': 'healthy'})
    
    async def start_server(self, host: str = '0.0.0.0', port: int = 8080):
        """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        runner = web.AppRunner(self.app)
        await runner.setup()
        site = web.TCPSite(runner, host, port)
        await site.start()
        
        logger.info(f"Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")
        
        return runner
    
    async def stop_server(self, runner):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
        await runner.cleanup()
        logger.info("Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode 
